{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async userId => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    return response;\n  } catch (error) {\n    return error;\n  }\n}); // export const updateLesson = createAsyncThunk('levels/loadLevels', async (userId) => {\n//   try {\n//     const response = await axios.get('http://localhost:1337/levels');\n//     return response;\n//   } catch (error) {\n//     return error;\n//   }\n// });\n\nexport const levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: []\n  },\n  reducers: {},\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadlevels.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadlevels.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.levels = action.payload.data;\n    },\n    // Display error state\n    [loadlevels.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadlevels.rejected]: (state, action) => {\n      state.status = 'error';\n      state.levels = [];\n      state.error = action.payload.message;\n    }\n  }\n});\nexport const selectLevels = state => state.level.levels;\nexport default levelSlice.reducer;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet211/src/features/levels/levels.slice.js"],"names":["axios","createAsyncThunk","createSlice","loadlevels","userId","response","get","error","levelSlice","name","initialState","status","levels","reducers","extraReducers","pending","state","fulfilled","action","payload","data","rejected","message","selectLevels","level","reducer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,mBAAD,EAAsB,MAAOG,MAAP,IAAkB;AAChF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,8BAAV,CAAvB;AACA,WAAOD,QAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AAEF,CARyC,CAAnC,C,CAUP;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA,OAAO,MAAMC,UAAU,GAAGN,WAAW,CAAC;AACpCO,EAAAA,IAAI,EAAE,QAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZJ,IAAAA,KAAK,EAAE,IAFK;AAGZK,IAAAA,MAAM,EAAE;AAHI,GAFsB;AAOpCC,EAAAA,QAAQ,EAAE,EAP0B;AASpCC,EAAAA,aAAa,EAAE;AACb;AACA,KAACX,UAAU,CAACY,OAAZ,GAAuBC,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACD,KALY;AAMb;AACA,KAACJ,UAAU,CAACc,SAAZ,GAAwB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACzCF,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACAS,MAAAA,KAAK,CAACJ,MAAN,GAAeM,MAAM,CAACC,OAAP,CAAeC,IAA9B;AACD,KAXY;AAYb;AACA,KAACjB,UAAU,CAACI,KAAZ,GAAoB,CAACS,KAAD,EAAQE,MAAR,KAAmB;AACrCF,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACC,OAAP,CAAeZ,KAA7B;AACD,KAhBY;AAiBb,KAACJ,UAAU,CAACkB,QAAZ,GAAuB,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACxCF,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACJ,MAAN,GAAe,EAAf;AACAI,MAAAA,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACC,OAAP,CAAeG,OAA7B;AACD;AArBY;AATqB,CAAD,CAA9B;AAmCP,OAAO,MAAMC,YAAY,GAAIP,KAAD,IAAWA,KAAK,CAACQ,KAAN,CAAYZ,MAA5C;AAEP,eAAeJ,UAAU,CAACiB,OAA1B","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async (userId) => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    return response;\n  } catch (error) {\n    return error;\n  }\n\n});\n\n// export const updateLesson = createAsyncThunk('levels/loadLevels', async (userId) => {\n//   try {\n//     const response = await axios.get('http://localhost:1337/levels');\n//     return response;\n//   } catch (error) {\n//     return error;\n//   }\n\n// });\n\n\nexport const levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: [],\n  },\n  reducers: {},\n\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadlevels.pending]: (state) => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadlevels.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.levels = action.payload.data;\n    },\n    // Display error state\n    [loadlevels.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadlevels.rejected]: (state, action) => {\n      state.status = 'error';\n      state.levels = [];\n      state.error = action.payload.message;\n    },\n\n  },\n});\n\nexport const selectLevels = (state) => state.level.levels;\n\nexport default levelSlice.reducer;"]},"metadata":{},"sourceType":"module"}