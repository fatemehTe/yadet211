{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\nexport const loadQuestions = createAsyncThunk('questions/loadQuestions', async step => {\n  try {\n    const response = await axios.get(\"http://localhost:1337/courses/\" + step + \"\");\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const questionSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    status: 'idle',\n    error: null,\n    questions: [],\n    initialQuestionQueue: []\n  },\n  reducers: {\n    makeInitial: _s(state => {\n      _s();\n\n      let questionsLength = useSelector(selectQuestionsLength);\n      let initial = [];\n\n      for (let i = 0; i < questionsLength; i++) {\n        initial[i] = i;\n      }\n\n      state.initialQuestionQueue = initial;\n    }, \"1KxisDSk+oQ97uSoeg65DwS/oi4=\", false, function () {\n      return [useSelector];\n    })\n  },\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadQuestions.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadQuestions.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.questions = action.payload.data.questions;\n    },\n    // Display error state\n    [loadQuestions.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadQuestions.rejected]: (state, action) => {\n      state.status = 'error';\n      state.questions = [];\n      state.error = action.payload.message;\n    }\n  }\n});\nexport const selectQuestions = state => state.question.questions;\nexport const selectQuestionsLength = state => state.question.questions.length;\nexport const selectInitialQuestionQueue = state => state.question.initialQuestionQueue;\nexport default questionSlice.reducer;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet211/src/features/questions/questions.slice.js"],"names":["axios","createAsyncThunk","createSlice","useSelector","loadQuestions","step","response","get","error","questionSlice","name","initialState","status","questions","initialQuestionQueue","reducers","makeInitial","state","questionsLength","selectQuestionsLength","initial","i","extraReducers","pending","fulfilled","action","payload","data","rejected","message","selectQuestions","question","length","selectInitialQuestionQueue","reducer"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,aAAa,GAAGH,gBAAgB,CAAC,yBAAD,EAA4B,MAAOI,IAAP,IAAgB;AACvF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,GAAN,CAAU,mCAAmCF,IAAnC,GAA0C,EAApD,CAAvB;AACA,WAAOC,QAAP;AAED,GAJD,CAIE,OAAOE,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AAEF,CAT4C,CAAtC;AAYP,OAAO,MAAMC,aAAa,GAAGP,WAAW,CAAC;AACvCQ,EAAAA,IAAI,EAAE,WADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZJ,IAAAA,KAAK,EAAE,IAFK;AAGZK,IAAAA,SAAS,EAAE,EAHC;AAIZC,IAAAA,oBAAoB,EAAE;AAJV,GAFyB;AAQvCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,WAAW,KAAGC,KAAD,IAAW;AAAA;;AACtB,UAAIC,eAAe,GAAGf,WAAW,CAACgB,qBAAD,CAAjC;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,eAApB,EAAqCG,CAAC,EAAtC,EAA0C;AACxCD,QAAAA,OAAO,CAACC,CAAD,CAAP,GAAaA,CAAb;AACD;;AACDJ,MAAAA,KAAK,CAACH,oBAAN,GAA6BM,OAA7B;AACD,KAPU;AAAA,cACajB,WADb;AAAA;AADH,GAR6B;AAmBvCmB,EAAAA,aAAa,EAAE;AACb;AACA,KAAClB,aAAa,CAACmB,OAAf,GAA0BN,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACD,KALY;AAMb;AACA,KAACJ,aAAa,CAACoB,SAAf,GAA2B,CAACP,KAAD,EAAQQ,MAAR,KAAmB;AAC5CR,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACAS,MAAAA,KAAK,CAACJ,SAAN,GAAkBY,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBd,SAAtC;AACD,KAXY;AAYb;AACA,KAACT,aAAa,CAACI,KAAf,GAAuB,CAACS,KAAD,EAAQQ,MAAR,KAAmB;AACxCR,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAciB,MAAM,CAACC,OAAP,CAAelB,KAA7B;AACD,KAhBY;AAiBb,KAACJ,aAAa,CAACwB,QAAf,GAA0B,CAACX,KAAD,EAAQQ,MAAR,KAAmB;AAC3CR,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACJ,SAAN,GAAkB,EAAlB;AACAI,MAAAA,KAAK,CAACT,KAAN,GAAciB,MAAM,CAACC,OAAP,CAAeG,OAA7B;AACD;AArBY;AAnBwB,CAAD,CAAjC;AA6CP,OAAO,MAAMC,eAAe,GAAIb,KAAD,IAAWA,KAAK,CAACc,QAAN,CAAelB,SAAlD;AACP,OAAO,MAAMM,qBAAqB,GAAIF,KAAD,IAAWA,KAAK,CAACc,QAAN,CAAelB,SAAf,CAAyBmB,MAAlE;AACP,OAAO,MAAMC,0BAA0B,GAAIhB,KAAD,IAAWA,KAAK,CAACc,QAAN,CAAejB,oBAA7D;AAEP,eAAeL,aAAa,CAACyB,OAA7B","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\n\nexport const loadQuestions = createAsyncThunk('questions/loadQuestions', async (step) => {\n  try {\n    const response = await axios.get(\"http://localhost:1337/courses/\" + step + \"\");\n    return response;\n\n  } catch (error) {\n    return error;\n  }\n\n});\n\n\nexport const questionSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    status: 'idle',\n    error: null,\n    questions: [],\n    initialQuestionQueue: [],\n  },\n  reducers: {\n    makeInitial: (state) => {\n      let questionsLength = useSelector(selectQuestionsLength);\n      let initial = [];\n      for (let i = 0; i < questionsLength; i++) {\n        initial[i] = i\n      }\n      state.initialQuestionQueue = initial;\n    }\n  },\n\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadQuestions.pending]: (state) => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadQuestions.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.questions = action.payload.data.questions;\n    },\n    // Display error state\n    [loadQuestions.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadQuestions.rejected]: (state, action) => {\n      state.status = 'error';\n      state.questions = [];\n      state.error = action.payload.message;\n    },\n\n  },\n});\n\nexport const selectQuestions = (state) => state.question.questions;\nexport const selectQuestionsLength = (state) => state.question.questions.length;\nexport const selectInitialQuestionQueue = (state) => state.question.initialQuestionQueue;\n\nexport default questionSlice.reducer;"]},"metadata":{},"sourceType":"module"}