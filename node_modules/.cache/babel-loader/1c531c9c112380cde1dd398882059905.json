{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async userId => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: []\n  },\n  reducers: {},\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadLevels.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadLevels.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.levels = action.payload.data.levels;\n    },\n    // Display error state\n    [loadLevels.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadLevels.rejected]: (state, action) => {\n      state.status = 'error';\n      state.levels = [];\n      state.error = action.payload.message;\n    }\n  }\n});","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/features/questions/levels.slice.js"],"names":["axios","createAsyncThunk","createSlice","loadlevels","userId","response","get","console","log","error","rejectWithValue","data","levelSlice","name","initialState","status","levels","reducers","extraReducers","loadLevels","pending","state","fulfilled","action","payload","rejected","message"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,mBAAD,EAAsB,MAAOG,MAAP,IAAkB;AAChF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,8BAAV,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,QAAjC;AACA,WAAOA,QAAP;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACd,WAAOC,eAAe,CAACD,KAAK,CAACJ,QAAN,CAAeM,IAAhB,CAAtB;AACD;AAEF,CATyC,CAAnC;AAWP,MAAMC,UAAU,GAAGV,WAAW,CAAC;AAC7BW,EAAAA,IAAI,EAAE,QADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZN,IAAAA,KAAK,EAAE,IAFK;AAGZO,IAAAA,MAAM,EAAE;AAHI,GAFe;AAO7BC,EAAAA,QAAQ,EAAE,EAPmB;AAQ7BC,EAAAA,aAAa,EAAE;AACb;AACA,KAACC,UAAU,CAACC,OAAZ,GAAuBC,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACN,MAAN,GAAe,SAAf;AACAM,MAAAA,KAAK,CAACZ,KAAN,GAAc,IAAd;AACD,KALY;AAMb;AACA,KAACU,UAAU,CAACG,SAAZ,GAAwB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACzCF,MAAAA,KAAK,CAACN,MAAN,GAAe,WAAf;AACAM,MAAAA,KAAK,CAACZ,KAAN,GAAc,IAAd;AACAY,MAAAA,KAAK,CAACL,MAAN,GAAeO,MAAM,CAACC,OAAP,CAAeb,IAAf,CAAoBK,MAAnC;AACD,KAXY;AAYb;AACA,KAACG,UAAU,CAACV,KAAZ,GAAoB,CAACY,KAAD,EAAQE,MAAR,KAAmB;AACrCF,MAAAA,KAAK,CAACN,MAAN,GAAe,OAAf;AACAM,MAAAA,KAAK,CAACZ,KAAN,GAAcc,MAAM,CAACC,OAAP,CAAef,KAA7B;AACD,KAhBY;AAiBb,KAACU,UAAU,CAACM,QAAZ,GAAuB,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AACxCF,MAAAA,KAAK,CAACN,MAAN,GAAe,OAAf;AACAM,MAAAA,KAAK,CAACL,MAAN,GAAe,EAAf;AACAK,MAAAA,KAAK,CAACZ,KAAN,GAAcc,MAAM,CAACC,OAAP,CAAeE,OAA7B;AACD;AArBY;AARc,CAAD,CAA9B","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async (userId) => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response)\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n\n});\n\nconst levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: [],\n  },\n  reducers: {},\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadLevels.pending]: (state) => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadLevels.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.levels = action.payload.data.levels;\n    },\n    // Display error state\n    [loadLevels.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadLevels.rejected]: (state, action) => {\n      state.status = 'error';\n      state.levels = [];\n      state.error = action.payload.message;\n    },\n\n  },\n});\n\n\n"]},"metadata":{},"sourceType":"module"}