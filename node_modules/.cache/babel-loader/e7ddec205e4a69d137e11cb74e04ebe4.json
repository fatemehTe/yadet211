{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async userId => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response);\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n});\nconst levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadLevels.pending, state => {\n      state.status = 'loading';\n    }).addCase(loadLevels.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.levels = action.payload.data.levels;\n    });\n  }\n}); // extraReducers: {\n//   // You can show loading state in the UI\n//   [loadLevels.pending]: (state) => {\n//     state.status = 'loading';\n//     state.error = null;\n//   },\n//   // Render the API response\n//   [loadLevels.fulfilled]: (state, action) => {\n//     state.status = 'fulfilled';\n//     state.error = null;\n//     state.levels = action.payload.data.levels;\n//   },\n//   // Display error state\n//   [loadLevels.error]: (state, action) => {\n//     state.status = 'error';\n//     state.error = action.payload.error;\n//   },\n//   [loadLevels.rejected]: (state, action) => {\n//     state.status = 'error';\n//     state.levels = [];\n//     state.error = action.payload.message;\n//   },\n// },\n// });\n\nexport const counterSlice = createSlice({\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: builder => {\n    builder.addCase(incrementAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(incrementAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.value += action.payload;\n    });\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\n\nexport const selectCount = state => state.counter.value; // We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\n\nexport const incrementIfOdd = amount => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/features/questions/levels.slice.js"],"names":["axios","createAsyncThunk","createSlice","loadlevels","userId","response","get","console","log","error","rejectWithValue","data","levelSlice","name","initialState","status","levels","reducers","extraReducers","builder","addCase","loadLevels","pending","state","fulfilled","action","payload","counterSlice","increment","value","decrement","incrementByAmount","incrementAsync","actions","selectCount","counter","incrementIfOdd","amount","dispatch","getState","currentValue","reducer"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async (userId) => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response)\n    return response;\n  } catch (error) {\n    return rejectWithValue(error.response.data);\n  }\n\n});\n\nconst levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: [],\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadLevels.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loadLevels.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.levels = action.payload.data.levels;\n      });\n  },\n});\n  // extraReducers: {\n  //   // You can show loading state in the UI\n  //   [loadLevels.pending]: (state) => {\n  //     state.status = 'loading';\n  //     state.error = null;\n  //   },\n  //   // Render the API response\n  //   [loadLevels.fulfilled]: (state, action) => {\n  //     state.status = 'fulfilled';\n  //     state.error = null;\n  //     state.levels = action.payload.data.levels;\n  //   },\n  //   // Display error state\n  //   [loadLevels.error]: (state, action) => {\n  //     state.status = 'error';\n  //     state.error = action.payload.error;\n  //   },\n  //   [loadLevels.rejected]: (state, action) => {\n  //     state.status = 'error';\n  //     state.levels = [];\n  //     state.error = action.payload.message;\n  //   },\n\n  // },\n// });\n\n\n\nexport const counterSlice = createSlice({\n  \n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;"]},"metadata":{},"sourceType":"module"}