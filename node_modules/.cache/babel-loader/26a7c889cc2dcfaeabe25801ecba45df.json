{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadQuestions = createAsyncThunk('questions/loadQuestions', async step => {\n  try {\n    const response = await axios.get('http://localhost:1337/courses/1' //  + step ? step : ''\n    );\n    console.log('**************: ' + response.data.questions[0].options);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const questionSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    status: 'idle',\n    error: null,\n    questions: []\n  },\n  reducers: {},\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadQuestions.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadQuestions.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.questions = action.payload.data;\n    },\n    // Display error state\n    [loadQuestions.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadQuestions.rejected]: (state, action) => {\n      state.status = 'error';\n      state.questions = [];\n      state.error = action.payload.message;\n    }\n  }\n});\nexport const selectQuestions = state => state.question.questions;\nexport default questionSlice.reducer;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/features/questions/questions.slice.js"],"names":["axios","createAsyncThunk","createSlice","loadQuestions","step","response","get","console","log","data","questions","options","error","questionSlice","name","initialState","status","reducers","extraReducers","pending","state","fulfilled","action","payload","rejected","message","selectQuestions","question","reducer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,aAAa,GAAGF,gBAAgB,CAAC,yBAAD,EAA4B,MAAOG,IAAP,IAAgB;AACvF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,iCAAV,CACrB;AADqB,KAAvB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,QAAQ,CAACI,IAAT,CAAcC,SAAd,CAAwB,CAAxB,EAA2BC,OAA5D;AACA,WAAON,QAAP;AAED,GAPD,CAOE,OAAOO,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AAEF,CAZ4C,CAAtC;AAeP,OAAO,MAAMC,aAAa,GAAGX,WAAW,CAAC;AACvCY,EAAAA,IAAI,EAAE,WADiC;AAEvCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZJ,IAAAA,KAAK,EAAE,IAFK;AAGZF,IAAAA,SAAS,EAAE;AAHC,GAFyB;AAOvCO,EAAAA,QAAQ,EAAE,EAP6B;AASvCC,EAAAA,aAAa,EAAE;AACb;AACA,KAACf,aAAa,CAACgB,OAAf,GAA0BC,KAAD,IAAW;AAClCA,MAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACAI,MAAAA,KAAK,CAACR,KAAN,GAAc,IAAd;AACD,KALY;AAMb;AACA,KAACT,aAAa,CAACkB,SAAf,GAA2B,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAC5CF,MAAAA,KAAK,CAACJ,MAAN,GAAe,WAAf;AACAI,MAAAA,KAAK,CAACR,KAAN,GAAc,IAAd;AACAQ,MAAAA,KAAK,CAACV,SAAN,GAAkBY,MAAM,CAACC,OAAP,CAAed,IAAjC;AACD,KAXY;AAYb;AACA,KAACN,aAAa,CAACS,KAAf,GAAuB,CAACQ,KAAD,EAAQE,MAAR,KAAmB;AACxCF,MAAAA,KAAK,CAACJ,MAAN,GAAe,OAAf;AACAI,MAAAA,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACC,OAAP,CAAeX,KAA7B;AACD,KAhBY;AAiBb,KAACT,aAAa,CAACqB,QAAf,GAA0B,CAACJ,KAAD,EAAQE,MAAR,KAAmB;AAC3CF,MAAAA,KAAK,CAACJ,MAAN,GAAe,OAAf;AACAI,MAAAA,KAAK,CAACV,SAAN,GAAkB,EAAlB;AACAU,MAAAA,KAAK,CAACR,KAAN,GAAcU,MAAM,CAACC,OAAP,CAAeE,OAA7B;AACD;AArBY;AATwB,CAAD,CAAjC;AAmCP,OAAO,MAAMC,eAAe,GAAIN,KAAD,IAAWA,KAAK,CAACO,QAAN,CAAejB,SAAlD;AAEP,eAAeG,aAAa,CAACe,OAA7B","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadQuestions = createAsyncThunk('questions/loadQuestions', async (step) => {\n  try {\n    const response = await axios.get('http://localhost:1337/courses/1'\n      //  + step ? step : ''\n    );\n    console.log('**************: ' + response.data.questions[0].options)\n    return response;\n\n  } catch (error) {\n    return error;\n  }\n\n});\n\n\nexport const questionSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    status: 'idle',\n    error: null,\n    questions: [],\n  },\n  reducers: {},\n\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadQuestions.pending]: (state) => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadQuestions.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.questions = action.payload.data;\n    },\n    // Display error state\n    [loadQuestions.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadQuestions.rejected]: (state, action) => {\n      state.status = 'error';\n      state.questions = [];\n      state.error = action.payload.message;\n    },\n\n  },\n});\n\nexport const selectQuestions = (state) => state.question.questions;\n\nexport default questionSlice.reducer;"]},"metadata":{},"sourceType":"module"}