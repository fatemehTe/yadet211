{"ast":null,"code":"var _jsxFileName = \"/home/fateme/Documents/projects/yadet211/src/components/circular-progress-bar/circular-progress-bar.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport CustomModal from \"../modal/CustomModel\";\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\nimport crown1 from './../../assets/images/crown1.png';\nimport crown2 from './../../assets/images/crown2.png';\nimport axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport 'react-circular-progressbar/dist/styles.css';\nimport './custom.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CustomCircularProgressbar(props) {\n  _s();\n\n  const [modalShow, setModalShow] = useState(false);\n\n  const setModal = () => setModalShow(false);\n\n  const [percentage, setpercentage] = useState(props.progress); //when set to -1 means Done with the circle and it should go to the moroor\n\n  const [degree, setdegree] = useState(props.degree);\n\n  const handlepercentage = addingPercentage => setpercentage(percentage + addingPercentage);\n\n  useEffect(() => {\n    console.log('*******props: ' + props.addProgress);\n\n    if (props.stepProgress === props.step && props.active && props.addProgress === true) {\n      if (percentage < 80) {\n        setInterval(() => {\n          handlepercentage(20);\n        }, 500);\n      } else if (percentage === 80 && degree + 1 <= props.maxDegree) {\n        makeHundred();\n        setdegree(degree + 1);\n      } else if (percentage === 80 && degree + 1 === props.maxDegree) {\n        setdegree(-1);\n      }\n    } //update the database\n\n\n    createAsyncThunk('courses/updateCourses', async () => {\n      try {\n        const response = await axios.put(\"http://localhost:1337/courses/\" + props.step + \"\", {\n          progress: 0,\n          degree: 0\n        });\n        return response;\n      } catch (error) {\n        return error;\n      }\n    });\n  }, []);\n\n  async function makeHundred() {\n    await setInterval(() => {\n      handlepercentage(20);\n    }, 500);\n    setTimeout(nextDegree, 1000);\n  }\n\n  async function nextDegree() {\n    await setInterval(() => {\n      handlepercentage(-percentage);\n    }, 500);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: 110,\n      height: 130\n    },\n    onClick: () => {\n      if (modalShow === false) {\n        setModalShow(true);\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(CircularProgressbarWithChildren, {\n      value: percentage,\n      styles: {\n        root: {},\n        path: {\n          stroke: `rgba(255,255,0, ${percentage / 1})`,\n          transition: 'stroke-dashoffset 0.5s ease 0s',\n          transform: 'rotate(0.4turn)',\n          transformOrigin: 'center center'\n        },\n        trail: {\n          stroke: '#d6d6d6' // strokeLinecap: 'butt',\n\n        },\n        text: {\n          fill: '#f88',\n          fontSize: '16px'\n        },\n        background: true,\n        background: {\n          fill: '#3e98c7'\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"img-style\",\n        src: props.active ? crown1 : crown2,\n        alt: \"crown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"inner-img-style\",\n        src: props.active ? crown1 : crown2,\n        alt: \"crown\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), props.active ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: 'absolute',\n          bottom: 3,\n          right: 18,\n          fontSize: 13,\n          fontWeight: 'bold'\n        },\n        children: degree\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this) : '']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: 'center'\n      },\n      children: props.text\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CustomModal, { ...props,\n      show: modalShow,\n      onHide: setModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CustomCircularProgressbar, \"LazMxH6blP31JQw5cpgMVokXzbE=\");\n\n_c = CustomCircularProgressbar;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomCircularProgressbar\");","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet211/src/components/circular-progress-bar/circular-progress-bar.js"],"names":["React","useEffect","useState","CustomModal","CircularProgressbarWithChildren","crown1","crown2","axios","createAsyncThunk","createSlice","CustomCircularProgressbar","props","modalShow","setModalShow","setModal","percentage","setpercentage","progress","degree","setdegree","handlepercentage","addingPercentage","console","log","addProgress","stepProgress","step","active","setInterval","maxDegree","makeHundred","response","put","error","setTimeout","nextDegree","width","height","root","path","stroke","transition","transform","transformOrigin","trail","text","fill","fontSize","background","position","bottom","right","fontWeight","textAlign"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport CustomModal from \"../modal/CustomModel\";\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\nimport crown1 from './../../assets/images/crown1.png';\nimport crown2 from './../../assets/images/crown2.png';\nimport axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport 'react-circular-progressbar/dist/styles.css';\nimport './custom.css';\n\nexport default function CustomCircularProgressbar(props) {\n\n  const [modalShow, setModalShow] = useState(false);\n  const setModal = () => setModalShow(false)\n  const [percentage, setpercentage] = useState(props.progress)\n  //when set to -1 means Done with the circle and it should go to the moroor\n  const [degree, setdegree] = useState(props.degree)\n  const handlepercentage = (addingPercentage) => setpercentage(\n    // percentage < 100 ?\n    (percentage + addingPercentage)\n    // :\n    // (percentage)\n  )\n\n  useEffect(() => {\n    console.log('*******props: '+props.addProgress)\n    if (props.stepProgress === props.step && props.active && props.addProgress === true) {\n      if (percentage < 80) {\n        setInterval(() => {\n          handlepercentage(20)\n        }, 500);\n      }\n      else if (percentage === 80 && degree + 1 <= props.maxDegree) {\n        makeHundred()\n        setdegree(degree + 1)\n      }\n      else if (percentage === 80 && degree + 1 === props.maxDegree) {\n        setdegree(-1)\n      }\n    }\n    //update the database\n    createAsyncThunk('courses/updateCourses', async () => {\n      try {\n        const response = await axios.put(\"http://localhost:1337/courses/\" + props.step + \"\",\n          { progress: 0, degree: 0 });\n        return response;\n\n      } catch (error) {\n        return error;\n      }\n\n    });\n\n  }\n    , [])\n\n  async function makeHundred() {\n    await setInterval(() => {\n      handlepercentage(20)\n    }, 500);\n    setTimeout(nextDegree, 1000)\n  }\n  async function nextDegree() {\n    await setInterval(() => {\n      handlepercentage(-percentage)\n    }, 500);\n  }\n  return (\n    <div style={{ width: 110, height: 130 }}\n      onClick={() => {\n        if (modalShow === false) {\n          setModalShow(true)\n        }\n      }\n      }\n    >\n      <CircularProgressbarWithChildren\n        value={percentage}\n        styles={{\n          root: {},\n          path: {\n            stroke: `rgba(255,255,0, ${percentage / 1})`,\n            transition: 'stroke-dashoffset 0.5s ease 0s',\n            transform: 'rotate(0.4turn)',\n            transformOrigin: 'center center',\n          },\n          trail: {\n            stroke: '#d6d6d6',\n            // strokeLinecap: 'butt',\n          },\n          text: {\n            fill: '#f88',\n            fontSize: '16px',\n          },\n          background: true,\n          background: {\n            fill: '#3e98c7',\n          },\n        }}\n      >\n        <img className='img-style' src={props.active ? crown1 : crown2} alt=\"crown\" />\n        <img className='inner-img-style' src={props.active ? crown1 : crown2} alt=\"crown\" />\n        {props.active ?\n          <div style={{ position: 'absolute', bottom: 3, right: 18, fontSize: 13, fontWeight: 'bold' }}>\n            {degree}\n          </div> : ''}\n\n      </CircularProgressbarWithChildren>\n      <div style={{ textAlign: 'center' }}>{props.text}</div>\n      < CustomModal\n        {...props}\n        show={modalShow}\n        onHide={setModal}\n      />\n    </div >\n  )\n}\n"]},"metadata":{},"sourceType":"module"}