{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async userId => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nconst levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loadLevels.pending, state => {\n      state.status = 'loading';\n    }).addCase(loadLevels.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.levels = action.payload.data.levels;\n    });\n  }\n}); // extraReducers: {\n//   // You can show loading state in the UI\n//   [loadLevels.pending]: (state) => {\n//     state.status = 'loading';\n//     state.error = null;\n//   },\n//   // Render the API response\n//   [loadLevels.fulfilled]: (state, action) => {\n//     state.status = 'fulfilled';\n//     state.error = null;\n//     state.levels = action.payload.data.levels;\n//   },\n//   // Display error state\n//   [loadLevels.error]: (state, action) => {\n//     state.status = 'error';\n//     state.error = action.payload.error;\n//   },\n//   [loadLevels.rejected]: (state, action) => {\n//     state.status = 'error';\n//     state.levels = [];\n//     state.error = action.payload.message;\n//   },\n// },\n// });\n\nexport default levelSlice;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/features/questions/levels.slice.js"],"names":["axios","createAsyncThunk","createSlice","loadlevels","userId","response","get","console","log","error","levelSlice","name","initialState","status","levels","reducers","extraReducers","builder","addCase","loadLevels","pending","state","fulfilled","action","payload","data"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,mBAAD,EAAsB,MAAOG,MAAP,IAAkB;AAChF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,8BAAV,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,QAAjC;AACA,WAAOA,QAAP;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AAEF,CATyC,CAAnC;AAWP,MAAMC,UAAU,GAAGR,WAAW,CAAC;AAC7BS,EAAAA,IAAI,EAAE,QADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZJ,IAAAA,KAAK,EAAE,IAFK;AAGZK,IAAAA,MAAM,EAAE;AAHI,GAFe;AAO7BC,EAAAA,QAAQ,EAAE,EAPmB;AAQ7BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWC,UAAU,CAACC,OADtB,EACgCC,KAAD,IAAW;AACtCA,MAAAA,KAAK,CAACR,MAAN,GAAe,SAAf;AACD,KAHH,EAIGK,OAJH,CAIWC,UAAU,CAACG,SAJtB,EAIiC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AAChDF,MAAAA,KAAK,CAACR,MAAN,GAAe,MAAf;AACAQ,MAAAA,KAAK,CAACP,MAAN,GAAeS,MAAM,CAACC,OAAP,CAAeC,IAAf,CAAoBX,MAAnC;AACD,KAPH;AAQD;AAjB4B,CAAD,CAA9B,C,CAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAGA,eAAeJ,UAAf","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async (userId) => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response)\n    return response;\n  } catch (error) {\n    return error;\n  }\n\n});\n\nconst levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: [],\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(loadLevels.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(loadLevels.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.levels = action.payload.data.levels;\n      });\n  },\n});\n// extraReducers: {\n//   // You can show loading state in the UI\n//   [loadLevels.pending]: (state) => {\n//     state.status = 'loading';\n//     state.error = null;\n//   },\n//   // Render the API response\n//   [loadLevels.fulfilled]: (state, action) => {\n//     state.status = 'fulfilled';\n//     state.error = null;\n//     state.levels = action.payload.data.levels;\n//   },\n//   // Display error state\n//   [loadLevels.error]: (state, action) => {\n//     state.status = 'error';\n//     state.error = action.payload.error;\n//   },\n//   [loadLevels.rejected]: (state, action) => {\n//     state.status = 'error';\n//     state.levels = [];\n//     state.error = action.payload.message;\n//   },\n\n// },\n// });\n\n\nexport default levelSlice;"]},"metadata":{},"sourceType":"module"}