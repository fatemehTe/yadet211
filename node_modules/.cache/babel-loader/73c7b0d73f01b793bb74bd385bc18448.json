{"ast":null,"code":"var _jsxFileName = \"/home/fateme/Documents/projects/yadet2/src/layout/lessonLayout/lessonLayout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\nimport CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\nimport Lesson from \"../../pages/lesson/lesson\";\nimport { BrowserRouter as Router, Link, useHistory } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport cross from './../../assets/images/cross.png';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\nimport './lessonLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LessonLayout(props) {\n  _s();\n\n  const [questionQueue, setQuestionQueue] = useState(0);\n  const [questionLength, setQuestionLength] = useState(0);\n  let questions = [];\n  questions = useSelector(selectQuestions);\n  let dispatch = useDispatch();\n  const {\n    step\n  } = useParams();\n  useEffect(() => {\n    dispatch(loadQuestions(step));\n    let initialQuestionQueue = [];\n\n    if (questions.length && questions.length !== 0) {\n      for (let i = 0; i < questions.length; i++) {\n        initialQuestionQueue[i] = i;\n      }\n\n      setQuestionQueue(initialQuestionQueue);\n    }\n  }, []);\n  const [questionCounter, setQuestionCounter] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [varient, setVarient] = useState(\"secondary\");\n  const [userAnswer, setUserAnswer] = useState(0);\n  const [correctAnswer, setCorrectAnswer] = useState(0);\n  const [status, setStatus] = useState(\"check\");\n  const [Continue, setContinue] = useState(false);\n  const [optionClicked, setOptionClicked] = useState(0);\n  const progressProgress = 100 / questions.length;\n  const history = useHistory();\n\n  const handleCheckClick = () => {\n    setContinue(true);\n    setVarient(() => userAnswer === 1 ? \"success\" : userAnswer === -1 ? \"danger\" : \"secondary\");\n    setStatus(() => userAnswer === 1 ? \"success\" : userAnswer === -1 ? \"fail\" : null);\n    setProgress(progress + (userAnswer === 1 ? progressProgress : 0));\n\n    if (optionClicked !== correctAnswer) {\n      setQuestionQueue([...questionQueue, questionQueue[questionCounter]]);\n    }\n  };\n\n  const handleContinueClick = () => {\n    setContinue(false);\n    setOptionClicked(0);\n    setQuestionCounter(() => questionCounter + 1 < questionQueue.length ? questionCounter + 1 : progress === 100 ? history.push('/endLessonStep/' + step) : null);\n    setVarient(\"secondary\");\n    setStatus(\"check\");\n  };\n\n  const handleCrossClick = () => {\n    history.push('/');\n  };\n\n  const onClick = i => {\n    setOptionClicked(i);\n    setVarient(\"primary\");\n\n    if (i === correctAnswer) {\n      setUserAnswer(1);\n    } else {\n      setUserAnswer(-1);\n    }\n  };\n\n  const currentQuestion = questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1);\n  let currentCorrectAnswer = 0;\n  currentQuestion.map(question => {\n    currentCorrectAnswer = question.Anwser;\n    setCorrectAnswer(currentCorrectAnswer);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questions.map((qq, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: qq.options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 25\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n} // import React, { useState, useEffect, useCallback } from \"react\";\n// import { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\n// import CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\n// import Lesson from \"../../pages/lesson/lesson\";\n// import {\n//     BrowserRouter as Router, Link, useHistory\n// } from 'react-router-dom';\n// import { useParams } from 'react-router-dom';\n// import cross from './../../assets/images/cross.png';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\n// import './lessonLayout.css';\n// export default function LessonLayout(props) {\n//     //questions should be asked from data base. step is for the lesson and the degree and the progress \n//     const currentQuestion =\n//         questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1)\n//     let currentCorrectAnswer = 0;\n//     currentQuestion.map((question) => {\n//         currentCorrectAnswer = question.Anwser;\n//         setCorrectAnswer(currentCorrectAnswer);\n//     })\n//     return (\n//         <div className='mainLesson'>\n//             <Row\n//                 className='mainProgressBar'\n//             >\n//                 {progress !== 100 ?\n//                     <Col sm={1} xs={1}\n//                         className='crossCol'\n//                     >\n//                         <img style={{ width: 20 }} src={cross} alt=\"cross\"\n//                             onClick={handleCrossClick} />\n//                     </Col> :\n//                     ''}\n//                 <Col sm={progress != 100 ? 11 : 12} xs={progress != 100 ? 11 : 12}\n//                     style={{ justifyContent: 'center', alignItems: 'center' }}\n//                 >\n//                     <ProgressBar now={progress}\n//                         className={progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n//                     /></Col>\n//             </Row>\n//             {\n//                 currentQuestion.map((question, key) => {\n//                     return (\n//                         <Container className='mainQuestion' key={key}>\n//                             <Lesson onClick={(i) => onClick(i)}\n//                                 question={question.Question}\n//                                 options={question.Options}\n//                                 correct={currentCorrectAnswer}\n//                                 status={status}\n//                                 optionClicked={optionClicked}\n//                                 Continue={Continue}\n//                             />\n//                         </Container>\n//                     )\n//                 })\n//             }\n//             <CheckCorrect className='mainCheckCorrect'\n//                 onClick={handleCheckClick}\n//                 onContinueClick={handleContinueClick}\n//                 varient={varient}\n//                 status={status}\n//                 Continue={Continue}\n//                 optionClicked={optionClicked}\n//             />\n//         </div>\n//     )\n// }\n\n_s(LessonLayout, \"BtGFkOqKfJjhRHniwPk9418rpsk=\", false, function () {\n  return [useSelector, useDispatch, useParams, useHistory];\n});\n\n_c = LessonLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"LessonLayout\");","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/layout/lessonLayout/lessonLayout.js"],"names":["React","useState","useEffect","useCallback","Container","ProgressBar","Col","Row","CheckCorrect","Lesson","BrowserRouter","Router","Link","useHistory","useParams","cross","useSelector","useDispatch","loadQuestions","selectQuestions","LessonLayout","props","questionQueue","setQuestionQueue","questionLength","setQuestionLength","questions","dispatch","step","initialQuestionQueue","length","i","questionCounter","setQuestionCounter","progress","setProgress","varient","setVarient","userAnswer","setUserAnswer","correctAnswer","setCorrectAnswer","status","setStatus","Continue","setContinue","optionClicked","setOptionClicked","progressProgress","history","handleCheckClick","handleContinueClick","push","handleCrossClick","onClick","currentQuestion","slice","currentCorrectAnswer","map","question","Anwser","qq","key","options"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\nimport CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\nimport Lesson from \"../../pages/lesson/lesson\";\nimport {\n    BrowserRouter as Router, Link, useHistory\n} from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport cross from './../../assets/images/cross.png';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\nimport './lessonLayout.css';\n\nexport default function LessonLayout(props) {\n\n    const [questionQueue, setQuestionQueue] = useState(0);\n    const [questionLength, setQuestionLength] = useState(0)\n\n    let questions = []\n    questions = useSelector(selectQuestions)\n    let dispatch = useDispatch()\n    const { step } = useParams();\n\n    useEffect(() => {\n        dispatch(loadQuestions(step));\n        let initialQuestionQueue = [];\n        if (questions.length && questions.length !== 0) {\n            for (let i = 0; i < questions.length; i++) {\n                initialQuestionQueue[i] = i\n            }\n            setQuestionQueue(initialQuestionQueue)\n        }\n\n    }, [])\n\n\n    const [questionCounter, setQuestionCounter] = useState(0);\n    const [progress, setProgress] = useState(0);\n    const [varient, setVarient] = useState(\"secondary\");\n    const [userAnswer, setUserAnswer] = useState(0);\n    const [correctAnswer, setCorrectAnswer] = useState(0);\n    const [status, setStatus] = useState(\"check\");\n    const [Continue, setContinue] = useState(false);\n\n    const [optionClicked, setOptionClicked] = useState(0);\n\n\n    const progressProgress = 100 / questions.length;\n    const history = useHistory()\n\n    const handleCheckClick = () => {\n        setContinue(true)\n        setVarient(() => (\n            userAnswer === 1 ? \"success\" :\n                (userAnswer === -1 ? \"danger\" :\n                    (\"secondary\"))\n        ))\n        setStatus(() => (\n            userAnswer === 1 ? \"success\" :\n                (userAnswer === -1 ? \"fail\" : null)\n        ))\n        setProgress(progress + (userAnswer === 1 ? progressProgress : 0));\n\n        if (optionClicked !== correctAnswer) {\n            setQuestionQueue([...questionQueue, questionQueue[questionCounter]]);\n        }\n    }\n    const handleContinueClick = () => {\n        setContinue(false)\n        setOptionClicked(0)\n        setQuestionCounter(() => (\n            questionCounter + 1 < questionQueue.length ? questionCounter + 1 :\n                (progress === 100 ?\n                    history.push('/endLessonStep/' + step)\n                    : null)\n\n        ))\n        setVarient(\"secondary\")\n        setStatus(\"check\")\n    }\n    const handleCrossClick = () => {\n        history.push('/')\n    }\n    const onClick = (i) => {\n        setOptionClicked(i)\n        setVarient(\"primary\")\n        if (i === correctAnswer) {\n            setUserAnswer(1)\n        } else {\n            setUserAnswer(-1);\n        }\n    }\n\n    const currentQuestion =\n        questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1)\n    let currentCorrectAnswer = 0;\n    currentQuestion.map((question) => {\n        currentCorrectAnswer = question.Anwser;\n        setCorrectAnswer(currentCorrectAnswer);\n\n    })\n    return (\n\n        < div >\n\n            {\n\n                questions.map((qq, key) => {\n                    return (\n                        <div>\n                            {qq.options}\n                        </div>\n                    )\n                })\n            }\n        </div >\n\n    )\n}\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\n// import CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\n// import Lesson from \"../../pages/lesson/lesson\";\n// import {\n//     BrowserRouter as Router, Link, useHistory\n// } from 'react-router-dom';\n// import { useParams } from 'react-router-dom';\n// import cross from './../../assets/images/cross.png';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\n// import './lessonLayout.css';\n\n// export default function LessonLayout(props) {\n//     //questions should be asked from data base. step is for the lesson and the degree and the progress \n\n\n\n//     const currentQuestion =\n//         questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1)\n//     let currentCorrectAnswer = 0;\n//     currentQuestion.map((question) => {\n\n//         currentCorrectAnswer = question.Anwser;\n//         setCorrectAnswer(currentCorrectAnswer);\n\n//     })\n\n//     return (\n//         <div className='mainLesson'>\n//             <Row\n//                 className='mainProgressBar'\n//             >\n//                 {progress !== 100 ?\n//                     <Col sm={1} xs={1}\n//                         className='crossCol'\n//                     >\n//                         <img style={{ width: 20 }} src={cross} alt=\"cross\"\n//                             onClick={handleCrossClick} />\n//                     </Col> :\n//                     ''}\n//                 <Col sm={progress != 100 ? 11 : 12} xs={progress != 100 ? 11 : 12}\n//                     style={{ justifyContent: 'center', alignItems: 'center' }}\n//                 >\n//                     <ProgressBar now={progress}\n//                         className={progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n//                     /></Col>\n//             </Row>\n//             {\n//                 currentQuestion.map((question, key) => {\n//                     return (\n//                         <Container className='mainQuestion' key={key}>\n//                             <Lesson onClick={(i) => onClick(i)}\n//                                 question={question.Question}\n//                                 options={question.Options}\n//                                 correct={currentCorrectAnswer}\n//                                 status={status}\n//                                 optionClicked={optionClicked}\n//                                 Continue={Continue}\n//                             />\n//                         </Container>\n//                     )\n//                 })\n//             }\n//             <CheckCorrect className='mainCheckCorrect'\n//                 onClick={handleCheckClick}\n//                 onContinueClick={handleContinueClick}\n//                 varient={varient}\n//                 status={status}\n//                 Continue={Continue}\n//                 optionClicked={optionClicked}\n//             />\n//         </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}