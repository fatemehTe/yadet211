{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async userId => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response);\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: []\n  },\n  reducers: {},\n  //   extraReducers: (builder) => {\n  //     builder\n  //       .addCase(loadLevels.pending, (state) => {\n  //         state.status = 'loading';\n  //       })\n  //       .addCase(loadLevels.fulfilled, (state, action) => {\n  //         state.status = 'idle';\n  //         state.levels = action.payload.data.levels;\n  //       });\n  //   },\n  // });\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadlevels.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadlevels.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.levels = action.data;\n    },\n    // Display error state\n    [loadlevels.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadlevels.rejected]: (state, action) => {\n      state.status = 'error';\n      state.levels = [];\n      state.error = action.payload.message;\n    }\n  }\n});\nexport const selectLevels = state => state.levels;\nexport default levelSlice;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/features/questions/levels.slice.js"],"names":["axios","createAsyncThunk","createSlice","loadlevels","userId","response","get","console","log","error","levelSlice","name","initialState","status","levels","reducers","extraReducers","pending","state","fulfilled","action","data","payload","rejected","message","selectLevels"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AAEA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,mBAAD,EAAsB,MAAOG,MAAP,IAAkB;AAChF,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,8BAAV,CAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,QAAjC;AACA,WAAOA,QAAP;AACD,GAJD,CAIE,OAAOI,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AAEF,CATyC,CAAnC;AAYP,OAAO,MAAMC,UAAU,GAAGR,WAAW,CAAC;AACpCS,EAAAA,IAAI,EAAE,QAD8B;AAEpCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,MAAM,EAAE,MADI;AAEZJ,IAAAA,KAAK,EAAE,IAFK;AAGZK,IAAAA,MAAM,EAAE;AAHI,GAFsB;AAOpCC,EAAAA,QAAQ,EAAE,EAP0B;AAQtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,aAAa,EAAE;AACb;AACA,KAACb,UAAU,CAACc,OAAZ,GAAuBC,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACL,MAAN,GAAe,SAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACD,KALY;AAMb;AACA,KAACN,UAAU,CAACgB,SAAZ,GAAwB,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACzCF,MAAAA,KAAK,CAACL,MAAN,GAAe,WAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAc,IAAd;AACAS,MAAAA,KAAK,CAACJ,MAAN,GAAeM,MAAM,CAACC,IAAtB;AACD,KAXY;AAYb;AACA,KAAClB,UAAU,CAACM,KAAZ,GAAoB,CAACS,KAAD,EAAQE,MAAR,KAAmB;AACrCF,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACE,OAAP,CAAeb,KAA7B;AACD,KAhBY;AAiBb,KAACN,UAAU,CAACoB,QAAZ,GAAuB,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACxCF,MAAAA,KAAK,CAACL,MAAN,GAAe,OAAf;AACAK,MAAAA,KAAK,CAACJ,MAAN,GAAe,EAAf;AACAI,MAAAA,KAAK,CAACT,KAAN,GAAcW,MAAM,CAACE,OAAP,CAAeE,OAA7B;AACD;AArBY;AAnBuB,CAAD,CAA9B;AA6CP,OAAO,MAAMC,YAAY,GAAIP,KAAD,IAAWA,KAAK,CAACJ,MAAtC;AACP,eAAeJ,UAAf","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nexport const loadlevels = createAsyncThunk('levels/loadLevels', async (userId) => {\n  try {\n    const response = await axios.get('http://localhost:1337/levels');\n    console.log('55555 response: ' + response)\n    return response;\n  } catch (error) {\n    return error;\n  }\n\n});\n\n\nexport const levelSlice = createSlice({\n  name: 'levels',\n  initialState: {\n    status: 'idle',\n    error: null,\n    levels: [],\n  },\n  reducers: {},\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(loadLevels.pending, (state) => {\n//         state.status = 'loading';\n//       })\n//       .addCase(loadLevels.fulfilled, (state, action) => {\n//         state.status = 'idle';\n//         state.levels = action.payload.data.levels;\n//       });\n//   },\n// });\nextraReducers: {\n  // You can show loading state in the UI\n  [loadlevels.pending]: (state) => {\n    state.status = 'loading';\n    state.error = null;\n  },\n  // Render the API response\n  [loadlevels.fulfilled]: (state, action) => {\n    state.status = 'fulfilled';\n    state.error = null;\n    state.levels = action.data;\n  },\n  // Display error state\n  [loadlevels.error]: (state, action) => {\n    state.status = 'error';\n    state.error = action.payload.error;\n  },\n  [loadlevels.rejected]: (state, action) => {\n    state.status = 'error';\n    state.levels = [];\n    state.error = action.payload.message;\n  },\n\n},\n});\n\nexport const selectLevels = (state) => state.levels;\nexport default levelSlice;"]},"metadata":{},"sourceType":"module"}