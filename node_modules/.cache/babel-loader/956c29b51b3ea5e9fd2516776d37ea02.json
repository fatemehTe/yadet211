{"ast":null,"code":"var _jsxFileName = \"/home/fateme/Documents/projects/yadet2/src/layout/lessonLayout/lessonLayout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\nimport CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\nimport Lesson from \"../../pages/lesson/lesson\";\nimport { BrowserRouter as Router, Link, useHistory } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport cross from './../../assets/images/cross.png';\nimport './lessonLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LessonLayout(props) {\n  _s();\n\n  //questions should be asked from data base. step is for the lesson and the degree and the progress \n  const {\n    step\n  } = useParams();\n  const [q, setQ] = useState([]);\n  let questions = [];\n  let question = {\n    Question: '',\n    Options: '',\n    Answer: 0,\n    Tip: ''\n  };\n  useEffect(() => {\n    let url = 'http://localhost:1337/courses';\n\n    if (step) {\n      url += `/${step}`;\n    }\n\n    fetch(url).then(res => res.json()).then(res => {\n      setQ(res.questions);\n    });\n  }, []);\n\n  for (let i = 0; i < q.length; i++) {\n    let question = {\n      Question: q[i].text,\n      Options: q[i].options,\n      Answer: q[i].anwser,\n      Tip: q[i].tip\n    };\n    console.log(\"RRRRRRRR: \" + q[i].text);\n    questions[i] = question;\n  }\n\n  let initialQuestionQueue = [];\n\n  for (let i = 0; i < questions.length; i++) {\n    initialQuestionQueue[i] = i;\n  }\n\n  const [progress, setProgress] = useState(0);\n  const [varient, setVarient] = useState(\"secondary\");\n  const [userAnswer, setUserAnswer] = useState(0);\n  const [correctAnswer, setCorrectAnswer] = useState(0);\n  const [status, setStatus] = useState(\"check\");\n  const [Continue, setContinue] = useState(false);\n  const [questionCounter, setQuestionCounter] = useState(0);\n  const [optionClicked, setOptionClicked] = useState(0);\n  const [questionQueue, setQuestionQueue] = useState(initialQuestionQueue);\n  const progressProgress = 100 / questions.length;\n  const history = useHistory();\n\n  const handleCheckClick = () => {\n    setContinue(true);\n    setVarient(() => userAnswer === 1 ? \"success\" : userAnswer === -1 ? \"danger\" : \"secondary\");\n    setStatus(() => userAnswer === 1 ? \"success\" : userAnswer === -1 ? \"fail\" : null);\n    setProgress(progress + (userAnswer === 1 ? progressProgress : 0));\n\n    if (optionClicked !== correctAnswer) {\n      setQuestionQueue([...questionQueue, questionQueue[questionCounter]]);\n    }\n  };\n\n  const handleContinueClick = () => {\n    setContinue(false);\n    setOptionClicked(0);\n    setQuestionCounter(() => questionCounter + 1 < questionQueue.length ? questionCounter + 1 : progress === 100 ? history.push('/endLessonStep/' + step) : null);\n    setVarient(\"secondary\");\n    setStatus(\"check\");\n  };\n\n  const handleCrossClick = () => {\n    history.push('/');\n  };\n\n  const onClick = i => {\n    setOptionClicked(i);\n    setVarient(\"primary\");\n\n    if (i === correctAnswer) {\n      setUserAnswer(1);\n    } else {\n      setUserAnswer(-1);\n    }\n  };\n\n  const currentQuestion = questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1);\n  let currentCorrectAnswer = 0;\n  currentQuestion.map(question => {\n    // console.log(\"@@@@@@@@2: \"+question.answer)\n    currentCorrectAnswer = question.Answer;\n    console.log('question.answer: ' + currentCorrectAnswer);\n  });\n  useEffect(() => {\n    setQuestionQueue(initialQuestionQueue);\n    setCorrectAnswer(currentCorrectAnswer);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mainLesson\",\n    children: [/*#__PURE__*/_jsxDEV(Row, {\n      className: \"mainProgressBar\",\n      children: [progress !== 100 ? /*#__PURE__*/_jsxDEV(Col, {\n        sm: 1,\n        xs: 1,\n        className: \"crossCol\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            width: 20\n          },\n          src: cross,\n          alt: \"cross\",\n          onClick: handleCrossClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 21\n      }, this) : '', /*#__PURE__*/_jsxDEV(Col, {\n        sm: progress != 100 ? 11 : 12,\n        xs: progress != 100 ? 11 : 12,\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(ProgressBar, {\n          now: progress,\n          className: progress !== 100 ? 'progressBar' : 'progressBarNoCross'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), currentQuestion.map((question, key) => {\n      return /*#__PURE__*/_jsxDEV(Container, {\n        className: \"mainQuestion\",\n        children: /*#__PURE__*/_jsxDEV(Lesson, {\n          onClick: i => onClick(i),\n          question: question.Question,\n          options: question.Options,\n          correct: currentCorrectAnswer,\n          status: status,\n          optionClicked: optionClicked,\n          Continue: Continue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 29\n        }, this)\n      }, key, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 25\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(CheckCorrect, {\n      className: \"mainCheckCorrect\",\n      onClick: handleCheckClick,\n      onContinueClick: handleContinueClick,\n      varient: varient,\n      status: status,\n      Continue: Continue,\n      optionClicked: optionClicked\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n} // import React from \"react\";\n// import { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\n// import CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\n// import Lesson from \"../../pages/lesson/lesson\";\n// import cross from './../../assets/images/cross.png';\n// import './lessonLayout.css';\n// export default class LessonLayout extends React.Component {\n//     //questions should be asked from data base. step is for the lesson and the degree and the progress \n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             progress: 0,\n//             varient: 'secondary',\n//             userAnswer: 0,\n//             correctAnswer: 0,\n//             status: 'check',\n//             Continue: false,\n//             questionCounter: 0,\n//             optionClicked: 0,\n//             questionQueue: [],\n//             status: 0,\n//             questions: [],\n//             DataisLoaded: false,\n//             step: 0,\n//         }\n//     }\n//     componentDidMount() {\n//         const { step } = this.props.match.params;\n//         this.setState({\n//             step: step\n//         })\n//         fetch(\n//             \"http://localhost:1337/courses\" + step)\n//             .then((res) => res.json())\n//             .then((json) => {\n//                 this.setState({\n//                     questions: json.questions,\n//                     DataisLoaded: true\n//                 });\n//             });\n//         let initialQuestionQueue = [];\n//         for (let i = 0; i < this.state.questions.length; i++) {\n//             initialQuestionQueue[i] = i\n//         }\n//         this.setState({\n//             questionQueue: initialQuestionQueue\n//         })\n//     }\n//     handleCheckClick = () => {\n//         const progressProgress = 100 / this.state.questions.length;\n//         this.setState({ continue: true })\n//         this.setState({\n//             varient: this.state.userAnswer === 1 ? \"success\" :\n//                 (this.state.userAnswer === -1 ? \"danger\" :\n//                     (\"secondary\"))\n//         })\n//         this.setState({\n//             status:\n//                 this.state.userAnswer === 1 ? \"success\" :\n//                     (this.state.userAnswer === -1 ? \"fail\" : null)\n//         })\n//         this.setState({\n//             progress: this.state.progress + (this.state.userAnswer === 1 ? progressProgress : 0)\n//         })\n//         if (this.state.optionClicked !== this.state.correctAnswer) {\n//             this.setState({\n//                 questionQueue:\n//                     [...this.state.questionQueue, this.state.questionQueue[this.state.questionCounter]]\n//             })\n//         }\n//     }\n//     handleContinueClick = () => {\n//         this.setState({\n//             continue: false\n//         })\n//         this.setState({\n//             optionClicked: 0\n//         })\n//         this.setState({\n//             questionCounter:\n//                 this.state.questionCounter + 1 < this.state.questionQueue.length ? this.state.questionCounter + 1 :\n//                     (this.state.progress === 100 ?\n//                         this.props.history.push('/endLessonStep/' + this.state.step)\n//                         : null)\n//         })\n//         this.setState({\n//             varient: \"secondary\"\n//         })\n//         this.setState({\n//             status: 'check'\n//         })\n//     }\n//     handleCrossClick = () => {\n//         // this.props.history.push('/')\n//     }\n//     onClick = (i) => {\n//         this.setState({\n//             optionClicked: i\n//         })\n//         this.setState({\n//             varient: \"primary\"\n//         })\n//         if (i === this.state.correctAnswer) {\n//             this.setState({\n//                 userAnswer: 1\n//             })\n//         } else {\n//             this.setState({\n//                 userAnswer: -1\n//             })\n//         }\n//     }\n//     render() {\n//         const currentQuestion =\n//         this.state.questions.slice(this.state.questionQueue[this.state.questionCounter], this.state.questionQueue[this.state.questionCounter] + 1)\n//         let currentCorrectAnswer = 0;\n//         currentQuestion.map((question) => {\n//             currentCorrectAnswer = question.Answer\n//         })\n//         // this.setState({\n//         //     correctAnswer: currentCorrectAnswer\n//         // })\n//         return (\n//             <div className='mainLesson'>\n//                 <Row\n//                     className='mainProgressBar'\n//                 >\n//                     {this.state.progress !== 100 ?\n//                         <Col sm={1} xs={1}\n//                             className='crossCol'\n//                         >\n//                             <img style={{ width: 20 }} src={cross} alt=\"cross\"\n//                                 onClick={this.handleCrossClick()} />\n//                         </Col> :\n//                         ''}\n//                     <Col sm={this.state.progress != 100 ? 11 : 12} xs={this.state.progress != 100 ? 11 : 12}\n//                         style={{ justifyContent: 'center', alignItems: 'center' }}\n//                     >\n//                         <ProgressBar now={this.state.progress}\n//                             className={this.state.progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n//                         /></Col>\n//                 </Row>\n//                 {\n//                     currentQuestion.map((question, key) => {\n//                         return (\n//                             <Container className='mainQuestion' key={key}>\n//                                 <Lesson onClick={(i) => this.onClick(i)}\n//                                     question={question.Question}\n//                                     options={question.Options}\n//                                     correct={this.state.currentCorrectAnswer}\n//                                     status={this.state.status}\n//                                     optionClicked={this.state.optionClicked}\n//                                     Continue={this.state.Continue}\n//                                 />\n//                             </Container>\n//                         )\n//                     })\n//                 }\n//                 <CheckCorrect className='mainCheckCorrect'\n//                     onClick={this.handleCheckClick()}\n//                     onContinueClick={this.handleContinueClick()}\n//                     varient={this.state.varient}\n//                     status={this.state.status}\n//                     Continue={this.state.Continue}\n//                     optionClicked={this.state.optionClicked}\n//                 />\n//             </div>\n//         )\n//     }\n// }\n\n_s(LessonLayout, \"TZ1baYMbMQ8GivHbso3SytGBolY=\", false, function () {\n  return [useParams, useHistory];\n});\n\n_c = LessonLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"LessonLayout\");","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/layout/lessonLayout/lessonLayout.js"],"names":["React","useState","useEffect","Container","ProgressBar","Col","Row","CheckCorrect","Lesson","BrowserRouter","Router","Link","useHistory","useParams","cross","LessonLayout","props","step","q","setQ","questions","question","Question","Options","Answer","Tip","url","fetch","then","res","json","i","length","text","options","anwser","tip","console","log","initialQuestionQueue","progress","setProgress","varient","setVarient","userAnswer","setUserAnswer","correctAnswer","setCorrectAnswer","status","setStatus","Continue","setContinue","questionCounter","setQuestionCounter","optionClicked","setOptionClicked","questionQueue","setQuestionQueue","progressProgress","history","handleCheckClick","handleContinueClick","push","handleCrossClick","onClick","currentQuestion","slice","currentCorrectAnswer","map","width","justifyContent","alignItems","key"],"mappings":"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O,EAAGzC,CAAD,IAAOiC,OAAO,CAACjC,CAAD,CAA/B;AACI,UAAA,QAAQ,EAAEV,QAAQ,CAACC,QADvB;AAEI,UAAA,OAAO,EAAED,QAAQ,CAACE,OAFtB;AAGI,UAAA,OAAO,EAAE4C,oBAHb;AAII,UAAA,MAAM,EAAEnB,MAJZ;AAKI,UAAA,aAAa,EAAEM,aALnB;AAMI,UAAA,QAAQ,EAAEJ;AANd;AAAA;AAAA;AAAA;AAAA;AADJ,SAAyCsB,GAAzC;AAAA;AAAA;AAAA;AAAA,cADJ;AAYH,KAbD,CApBR,eAmCI,QAAC,YAAD;AAAc,MAAA,SAAS,EAAC,kBAAxB;AACI,MAAA,OAAO,EAAEZ,gBADb;AAEI,MAAA,eAAe,EAAEC,mBAFrB;AAGI,MAAA,OAAO,EAAEnB,OAHb;AAII,MAAA,MAAM,EAAEM,MAJZ;AAKI,MAAA,QAAQ,EAAEE,QALd;AAMI,MAAA,aAAa,EAAEI;AANnB;AAAA;AAAA;AAAA;AAAA,YAnCJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA8CH,C,CACD;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAnWwBvC,Y;UAEHF,S,EAuDDD,U;;;KAzDIG,Y","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\nimport CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\nimport Lesson from \"../../pages/lesson/lesson\";\nimport {\n    BrowserRouter as Router, Link, useHistory\n} from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport cross from './../../assets/images/cross.png';\nimport './lessonLayout.css';\n\nexport default function LessonLayout(props) {\n    //questions should be asked from data base. step is for the lesson and the degree and the progress \n    const { step } = useParams();\n    const [q, setQ] = useState([]);\n    let questions = [];\n    let question = {\n        Question: '',\n        Options: '',\n        Answer: 0,\n        Tip: '',\n    }\n\n    useEffect(() => {\n        let url = 'http://localhost:1337/courses';\n        if (step) {\n            url += `/${step}`;\n        }\n        fetch(url)\n            .then(res => res.json())\n            .then(res => {\n                setQ(res.questions);\n            });\n    }, []);\n\n\n\n    for (let i = 0; i < q.length; i++) {\n        let question = {\n            Question: q[i].text,\n            Options: q[i].options,\n            Answer: q[i].anwser,\n            Tip: q[i].tip,\n        }\n        console.log(\"RRRRRRRR: \"+q[i].text)\n        questions[i] = question;\n    }\n\n\n\n    let initialQuestionQueue = [];\n    for (let i = 0; i < questions.length; i++) {\n        initialQuestionQueue[i] = i\n    }\n\n\n\n    const [progress, setProgress] = useState(0);\n    const [varient, setVarient] = useState(\"secondary\");\n    const [userAnswer, setUserAnswer] = useState(0);\n    const [correctAnswer, setCorrectAnswer] = useState(0);\n    const [status, setStatus] = useState(\"check\");\n    const [Continue, setContinue] = useState(false);\n    const [questionCounter, setQuestionCounter] = useState(0);\n    const [optionClicked, setOptionClicked] = useState(0);\n    const [questionQueue, setQuestionQueue] = useState(initialQuestionQueue);\n\n    const progressProgress = 100 / questions.length;\n    const history = useHistory()\n\n    const handleCheckClick = () => {\n        setContinue(true)\n        setVarient(() => (\n            userAnswer === 1 ? \"success\" :\n                (userAnswer === -1 ? \"danger\" :\n                    (\"secondary\"))\n        ))\n        setStatus(() => (\n            userAnswer === 1 ? \"success\" :\n                (userAnswer === -1 ? \"fail\" : null)\n        ))\n        setProgress(progress + (userAnswer === 1 ? progressProgress : 0));\n\n        if (optionClicked !== correctAnswer) {\n            setQuestionQueue([...questionQueue, questionQueue[questionCounter]]);\n        }\n    }\n    const handleContinueClick = () => {\n        setContinue(false)\n        setOptionClicked(0)\n        setQuestionCounter(() => (\n            questionCounter + 1 < questionQueue.length ? questionCounter + 1 :\n                (progress === 100 ?\n                    history.push('/endLessonStep/' + step)\n                    : null)\n\n        ))\n        setVarient(\"secondary\")\n        setStatus(\"check\")\n    }\n    const handleCrossClick = () => {\n        history.push('/')\n    }\n    const onClick = (i) => {\n        setOptionClicked(i)\n        setVarient(\"primary\")\n        if (i === correctAnswer) {\n            setUserAnswer(1)\n        } else {\n            setUserAnswer(-1);\n        }\n    }\n\n\n    const currentQuestion =\n        questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1)\n    let currentCorrectAnswer = 0;\n    currentQuestion.map((question) => {\n        // console.log(\"@@@@@@@@2: \"+question.answer)\n        currentCorrectAnswer = question.Answer;\n        console.log('question.answer: ' + currentCorrectAnswer)\n    })\n\n\n    useEffect(() => {\n        setQuestionQueue(initialQuestionQueue)\n        setCorrectAnswer(currentCorrectAnswer);\n    });\n\n\n    return (\n        <div className='mainLesson'>\n            <Row\n                className='mainProgressBar'\n            >\n                {progress !== 100 ?\n                    <Col sm={1} xs={1}\n                        className='crossCol'\n                    >\n                        <img style={{ width: 20 }} src={cross} alt=\"cross\"\n                            onClick={handleCrossClick} />\n                    </Col> :\n                    ''}\n                <Col sm={progress != 100 ? 11 : 12} xs={progress != 100 ? 11 : 12}\n                    style={{ justifyContent: 'center', alignItems: 'center' }}\n                >\n                    <ProgressBar now={progress}\n                        className={progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n                    /></Col>\n            </Row>\n            {\n                currentQuestion.map((question, key) => {\n                    return (\n                        <Container className='mainQuestion' key={key}>\n                            <Lesson onClick={(i) => onClick(i)}\n                                question={question.Question}\n                                options={question.Options}\n                                correct={currentCorrectAnswer}\n                                status={status}\n                                optionClicked={optionClicked}\n                                Continue={Continue}\n                            />\n                        </Container>\n                    )\n                })\n            }\n            <CheckCorrect className='mainCheckCorrect'\n                onClick={handleCheckClick}\n                onContinueClick={handleContinueClick}\n                varient={varient}\n                status={status}\n                Continue={Continue}\n                optionClicked={optionClicked}\n            />\n        </div>\n    )\n}\n// import React from \"react\";\n// import { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\n// import CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\n// import Lesson from \"../../pages/lesson/lesson\";\n// import cross from './../../assets/images/cross.png';\n// import './lessonLayout.css';\n\n\n\n// export default class LessonLayout extends React.Component {\n//     //questions should be asked from data base. step is for the lesson and the degree and the progress \n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             progress: 0,\n//             varient: 'secondary',\n//             userAnswer: 0,\n//             correctAnswer: 0,\n//             status: 'check',\n//             Continue: false,\n//             questionCounter: 0,\n//             optionClicked: 0,\n//             questionQueue: [],\n//             status: 0,\n//             questions: [],\n//             DataisLoaded: false,\n//             step: 0,\n//         }\n//     }\n\n//     componentDidMount() {\n//         const { step } = this.props.match.params;\n//         this.setState({\n//             step: step\n//         })\n\n//         fetch(\n//             \"http://localhost:1337/courses\" + step)\n//             .then((res) => res.json())\n//             .then((json) => {\n//                 this.setState({\n//                     questions: json.questions,\n//                     DataisLoaded: true\n//                 });\n//             });\n\n//         let initialQuestionQueue = [];\n//         for (let i = 0; i < this.state.questions.length; i++) {\n//             initialQuestionQueue[i] = i\n//         }\n//         this.setState({\n//             questionQueue: initialQuestionQueue\n//         })\n//     }\n\n//     handleCheckClick = () => {\n//         const progressProgress = 100 / this.state.questions.length;\n//         this.setState({ continue: true })\n//         this.setState({\n//             varient: this.state.userAnswer === 1 ? \"success\" :\n//                 (this.state.userAnswer === -1 ? \"danger\" :\n//                     (\"secondary\"))\n//         })\n//         this.setState({\n//             status:\n//                 this.state.userAnswer === 1 ? \"success\" :\n//                     (this.state.userAnswer === -1 ? \"fail\" : null)\n//         })\n\n//         this.setState({\n//             progress: this.state.progress + (this.state.userAnswer === 1 ? progressProgress : 0)\n//         })\n\n//         if (this.state.optionClicked !== this.state.correctAnswer) {\n//             this.setState({\n//                 questionQueue:\n//                     [...this.state.questionQueue, this.state.questionQueue[this.state.questionCounter]]\n//             })\n//         }\n//     }\n//     handleContinueClick = () => {\n\n//         this.setState({\n//             continue: false\n//         })\n\n//         this.setState({\n//             optionClicked: 0\n//         })\n\n//         this.setState({\n//             questionCounter:\n//                 this.state.questionCounter + 1 < this.state.questionQueue.length ? this.state.questionCounter + 1 :\n//                     (this.state.progress === 100 ?\n//                         this.props.history.push('/endLessonStep/' + this.state.step)\n//                         : null)\n//         })\n\n//         this.setState({\n//             varient: \"secondary\"\n//         })\n\n//         this.setState({\n//             status: 'check'\n//         })\n//     }\n//     handleCrossClick = () => {\n//         // this.props.history.push('/')\n//     }\n//     onClick = (i) => {\n\n//         this.setState({\n//             optionClicked: i\n//         })\n//         this.setState({\n//             varient: \"primary\"\n//         })\n//         if (i === this.state.correctAnswer) {\n\n//             this.setState({\n//                 userAnswer: 1\n//             })\n//         } else {\n//             this.setState({\n//                 userAnswer: -1\n//             })\n//         }\n//     }\n\n\n//     render() {\n\n//         const currentQuestion =\n//         this.state.questions.slice(this.state.questionQueue[this.state.questionCounter], this.state.questionQueue[this.state.questionCounter] + 1)\n//         let currentCorrectAnswer = 0;\n//         currentQuestion.map((question) => {\n//             currentCorrectAnswer = question.Answer\n//         })\n//         // this.setState({\n//         //     correctAnswer: currentCorrectAnswer\n//         // })\n\n//         return (\n//             <div className='mainLesson'>\n//                 <Row\n//                     className='mainProgressBar'\n//                 >\n//                     {this.state.progress !== 100 ?\n//                         <Col sm={1} xs={1}\n//                             className='crossCol'\n//                         >\n//                             <img style={{ width: 20 }} src={cross} alt=\"cross\"\n//                                 onClick={this.handleCrossClick()} />\n//                         </Col> :\n//                         ''}\n//                     <Col sm={this.state.progress != 100 ? 11 : 12} xs={this.state.progress != 100 ? 11 : 12}\n//                         style={{ justifyContent: 'center', alignItems: 'center' }}\n//                     >\n//                         <ProgressBar now={this.state.progress}\n//                             className={this.state.progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n//                         /></Col>\n//                 </Row>\n//                 {\n//                     currentQuestion.map((question, key) => {\n//                         return (\n//                             <Container className='mainQuestion' key={key}>\n//                                 <Lesson onClick={(i) => this.onClick(i)}\n//                                     question={question.Question}\n//                                     options={question.Options}\n//                                     correct={this.state.currentCorrectAnswer}\n//                                     status={this.state.status}\n//                                     optionClicked={this.state.optionClicked}\n//                                     Continue={this.state.Continue}\n//                                 />\n//                             </Container>\n//                         )\n//                     })\n//                 }\n//                 <CheckCorrect className='mainCheckCorrect'\n//                     onClick={this.handleCheckClick()}\n//                     onContinueClick={this.handleContinueClick()}\n//                     varient={this.state.varient}\n//                     status={this.state.status}\n//                     Continue={this.state.Continue}\n//                     optionClicked={this.state.optionClicked}\n//                 />\n//             </div>\n//         )\n//     }\n// }"]},"metadata":{},"sourceType":"module"}