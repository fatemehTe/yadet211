{"ast":null,"code":"var _jsxFileName = \"/home/fateme/Documents/projects/yadet2/src/layout/lessonLayout/lessonLayout.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\nimport CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\nimport Lesson from \"../../pages/lesson/lesson\";\nimport { BrowserRouter as Router, Link, useHistory } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport cross from './../../assets/images/cross.png';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\nimport './lessonLayout.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LessonLayout(props) {\n  _s();\n\n  const questions = useSelector(selectQuestions);\n  let dispatch = useDispatch();\n  const {\n    step\n  } = useParams();\n  dispatch(loadQuestions(step));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: questions.map((q, key) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: q.options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 21\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n} // import React, { useState, useEffect, useCallback } from \"react\";\n// import { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\n// import CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\n// import Lesson from \"../../pages/lesson/lesson\";\n// import {\n//     BrowserRouter as Router, Link, useHistory\n// } from 'react-router-dom';\n// import { useParams } from 'react-router-dom';\n// import cross from './../../assets/images/cross.png';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\n// import './lessonLayout.css';\n// export default function LessonLayout(props) {\n//     //questions should be asked from data base. step is for the lesson and the degree and the progress \n//     const questions = useSelector(selectQuestions)\n//     let dispatch = useDispatch()\n//     // useEffect(() => {\n//     //     dispatch(loadQuestions());\n//     //     let initialQuestionQueue = [];\n//     //     for (let i = 0; i < questions.length; i++) {\n//     //         initialQuestionQueue[i] = i\n//     //     }\n//     // }, [])\n//     dispatch(loadQuestions());\n//     const { step } = useParams();\n//     const [q, setQ] = useState([]);\n//     const [questionQueue, setQuestionQueue] = useState(0);\n//     const [progress, setProgress] = useState(0);\n//     const [varient, setVarient] = useState(\"secondary\");\n//     const [userAnswer, setUserAnswer] = useState(0);\n//     const [correctAnswer, setCorrectAnswer] = useState(0);\n//     const [status, setStatus] = useState(\"check\");\n//     const [Continue, setContinue] = useState(false);\n//     const [questionCounter, setQuestionCounter] = useState(0);\n//     const [optionClicked, setOptionClicked] = useState(0);\n//     const progressProgress = 100 / questions.length;\n//     const history = useHistory()\n//     const handleCheckClick = () => {\n//         setContinue(true)\n//         setVarient(() => (\n//             userAnswer === 1 ? \"success\" :\n//                 (userAnswer === -1 ? \"danger\" :\n//                     (\"secondary\"))\n//         ))\n//         setStatus(() => (\n//             userAnswer === 1 ? \"success\" :\n//                 (userAnswer === -1 ? \"fail\" : null)\n//         ))\n//         setProgress(progress + (userAnswer === 1 ? progressProgress : 0));\n//         if (optionClicked !== correctAnswer) {\n//             setQuestionQueue([...questionQueue, questionQueue[questionCounter]]);\n//         }\n//     }\n//     const handleContinueClick = () => {\n//         setContinue(false)\n//         setOptionClicked(0)\n//         setQuestionCounter(() => (\n//             questionCounter + 1 < questionQueue.length ? questionCounter + 1 :\n//                 (progress === 100 ?\n//                     history.push('/endLessonStep/' + step)\n//                     : null)\n//         ))\n//         setVarient(\"secondary\")\n//         setStatus(\"check\")\n//     }\n//     const handleCrossClick = () => {\n//         history.push('/')\n//     }\n//     const onClick = (i) => {\n//         setOptionClicked(i)\n//         setVarient(\"primary\")\n//         if (i === correctAnswer) {\n//             setUserAnswer(1)\n//         } else {\n//             setUserAnswer(-1);\n//         }\n//     }\n//     const currentQuestion =\n//         questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1)\n//     let currentCorrectAnswer = 0;\n//     currentQuestion.map((question) => {\n//         currentCorrectAnswer = question.Anwser;\n//         setCorrectAnswer(currentCorrectAnswer);\n//     })\n//     return (\n//         <div className='mainLesson'>\n//             <Row\n//                 className='mainProgressBar'\n//             >\n//                 {progress !== 100 ?\n//                     <Col sm={1} xs={1}\n//                         className='crossCol'\n//                     >\n//                         <img style={{ width: 20 }} src={cross} alt=\"cross\"\n//                             onClick={handleCrossClick} />\n//                     </Col> :\n//                     ''}\n//                 <Col sm={progress != 100 ? 11 : 12} xs={progress != 100 ? 11 : 12}\n//                     style={{ justifyContent: 'center', alignItems: 'center' }}\n//                 >\n//                     <ProgressBar now={progress}\n//                         className={progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n//                     /></Col>\n//             </Row>\n//             {\n//                 currentQuestion.map((question, key) => {\n//                     return (\n//                         <Container className='mainQuestion' key={key}>\n//                             <Lesson onClick={(i) => onClick(i)}\n//                                 question={question.Question}\n//                                 options={question.Options}\n//                                 correct={currentCorrectAnswer}\n//                                 status={status}\n//                                 optionClicked={optionClicked}\n//                                 Continue={Continue}\n//                             />\n//                         </Container>\n//                     )\n//                 })\n//             }\n//             <CheckCorrect className='mainCheckCorrect'\n//                 onClick={handleCheckClick}\n//                 onContinueClick={handleContinueClick}\n//                 varient={varient}\n//                 status={status}\n//                 Continue={Continue}\n//                 optionClicked={optionClicked}\n//             />\n//         </div>\n//     )\n// }\n\n_s(LessonLayout, \"PK910sAPfQG8OGEHoFbNKm83XqI=\", false, function () {\n  return [useSelector, useDispatch, useParams];\n});\n\n_c = LessonLayout;\n\nvar _c;\n\n$RefreshReg$(_c, \"LessonLayout\");","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet2/src/layout/lessonLayout/lessonLayout.js"],"names":["React","useState","useEffect","useCallback","Container","ProgressBar","Col","Row","CheckCorrect","Lesson","BrowserRouter","Router","Link","useHistory","useParams","cross","useSelector","useDispatch","loadQuestions","selectQuestions","LessonLayout","props","questions","dispatch","step","map","q","key","options"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,GAAjC,EAAsCC,GAAtC,QAAiD,iBAAjD;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,SACIC,aAAa,IAAIC,MADrB,EAC6BC,IAD7B,EACmCC,UADnC,QAEO,kBAFP;AAGA,SAASC,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,MAAkB,iCAAlB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,aAAT,EAAwBC,eAAxB,QAA+C,0CAA/C;AACA,OAAO,oBAAP;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACxC,QAAMC,SAAS,GAAGN,WAAW,CAACG,eAAD,CAA7B;AACA,MAAII,QAAQ,GAAGN,WAAW,EAA1B;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAWV,SAAS,EAA1B;AACAS,EAAAA,QAAQ,CAACL,aAAa,CAACM,IAAD,CAAd,CAAR;AAEA,sBACI;AAAA,cACKF,SAAS,CAACG,GAAV,CAAc,CAACC,CAAD,EAAIC,GAAJ,KAAY;AACvB,0BACI;AAAA,kBACKD,CAAC,CAACE;AADP;AAAA;AAAA;AAAA;AAAA,cnKwBR,Y;UACFJ,W,EACHC,W,EACEH,S;;;KAHGM,Y","sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\nimport { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\nimport CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\nimport Lesson from \"../../pages/lesson/lesson\";\nimport {\n    BrowserRouter as Router, Link, useHistory\n} from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport cross from './../../assets/images/cross.png';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\nimport './lessonLayout.css';\n\nexport default function LessonLayout(props) {\n    const questions = useSelector(selectQuestions)\n    let dispatch = useDispatch()\n    const { step } = useParams();\n    dispatch(loadQuestions(step));\n\n    return (\n        <div>\n            {questions.map((q, key) => {\n                return (\n                    <div>\n                        {q.options}\n                    </div>\n                )\n            })}\n        </div>\n\n    )\n}\n\n// import React, { useState, useEffect, useCallback } from \"react\";\n// import { Container, ProgressBar, Col, Row } from \"react-bootstrap\";\n// import CheckCorrect from \"../../components/checkCorrect/checkCorrect\";\n// import Lesson from \"../../pages/lesson/lesson\";\n// import {\n//     BrowserRouter as Router, Link, useHistory\n// } from 'react-router-dom';\n// import { useParams } from 'react-router-dom';\n// import cross from './../../assets/images/cross.png';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { loadQuestions, selectQuestions } from '../../features/questions/questions.slice';\n// import './lessonLayout.css';\n\n// export default function LessonLayout(props) {\n//     //questions should be asked from data base. step is for the lesson and the degree and the progress \n//     const questions = useSelector(selectQuestions)\n\n//     let dispatch = useDispatch()\n//     // useEffect(() => {\n//     //     dispatch(loadQuestions());\n//     //     let initialQuestionQueue = [];\n//     //     for (let i = 0; i < questions.length; i++) {\n//     //         initialQuestionQueue[i] = i\n//     //     }\n//     // }, [])\n\n//     dispatch(loadQuestions());\n//     const { step } = useParams();\n//     const [q, setQ] = useState([]);\n//     const [questionQueue, setQuestionQueue] = useState(0);\n//     const [progress, setProgress] = useState(0);\n//     const [varient, setVarient] = useState(\"secondary\");\n//     const [userAnswer, setUserAnswer] = useState(0);\n//     const [correctAnswer, setCorrectAnswer] = useState(0);\n//     const [status, setStatus] = useState(\"check\");\n//     const [Continue, setContinue] = useState(false);\n//     const [questionCounter, setQuestionCounter] = useState(0);\n//     const [optionClicked, setOptionClicked] = useState(0);\n\n\n//     const progressProgress = 100 / questions.length;\n//     const history = useHistory()\n\n//     const handleCheckClick = () => {\n//         setContinue(true)\n//         setVarient(() => (\n//             userAnswer === 1 ? \"success\" :\n//                 (userAnswer === -1 ? \"danger\" :\n//                     (\"secondary\"))\n//         ))\n//         setStatus(() => (\n//             userAnswer === 1 ? \"success\" :\n//                 (userAnswer === -1 ? \"fail\" : null)\n//         ))\n//         setProgress(progress + (userAnswer === 1 ? progressProgress : 0));\n\n//         if (optionClicked !== correctAnswer) {\n//             setQuestionQueue([...questionQueue, questionQueue[questionCounter]]);\n//         }\n//     }\n//     const handleContinueClick = () => {\n//         setContinue(false)\n//         setOptionClicked(0)\n//         setQuestionCounter(() => (\n//             questionCounter + 1 < questionQueue.length ? questionCounter + 1 :\n//                 (progress === 100 ?\n//                     history.push('/endLessonStep/' + step)\n//                     : null)\n\n//         ))\n//         setVarient(\"secondary\")\n//         setStatus(\"check\")\n//     }\n//     const handleCrossClick = () => {\n//         history.push('/')\n//     }\n//     const onClick = (i) => {\n//         setOptionClicked(i)\n//         setVarient(\"primary\")\n//         if (i === correctAnswer) {\n//             setUserAnswer(1)\n//         } else {\n//             setUserAnswer(-1);\n//         }\n//     }\n\n\n//     const currentQuestion =\n//         questions.slice(questionQueue[questionCounter], questionQueue[questionCounter] + 1)\n//     let currentCorrectAnswer = 0;\n//     currentQuestion.map((question) => {\n\n//         currentCorrectAnswer = question.Anwser;\n//         setCorrectAnswer(currentCorrectAnswer);\n\n//     })\n\n//     return (\n//         <div className='mainLesson'>\n//             <Row\n//                 className='mainProgressBar'\n//             >\n//                 {progress !== 100 ?\n//                     <Col sm={1} xs={1}\n//                         className='crossCol'\n//                     >\n//                         <img style={{ width: 20 }} src={cross} alt=\"cross\"\n//                             onClick={handleCrossClick} />\n//                     </Col> :\n//                     ''}\n//                 <Col sm={progress != 100 ? 11 : 12} xs={progress != 100 ? 11 : 12}\n//                     style={{ justifyContent: 'center', alignItems: 'center' }}\n//                 >\n//                     <ProgressBar now={progress}\n//                         className={progress !== 100 ? 'progressBar' : 'progressBarNoCross'}\n//                     /></Col>\n//             </Row>\n//             {\n//                 currentQuestion.map((question, key) => {\n//                     return (\n//                         <Container className='mainQuestion' key={key}>\n//                             <Lesson onClick={(i) => onClick(i)}\n//                                 question={question.Question}\n//                                 options={question.Options}\n//                                 correct={currentCorrectAnswer}\n//                                 status={status}\n//                                 optionClicked={optionClicked}\n//                                 Continue={Continue}\n//                             />\n//                         </Container>\n//                     )\n//                 })\n//             }\n//             <CheckCorrect className='mainCheckCorrect'\n//                 onClick={handleCheckClick}\n//                 onContinueClick={handleContinueClick}\n//                 varient={varient}\n//                 status={status}\n//                 Continue={Continue}\n//                 optionClicked={optionClicked}\n//             />\n//         </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}