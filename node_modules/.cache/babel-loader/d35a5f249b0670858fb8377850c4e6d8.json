{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\nexport const loadQuestions = createAsyncThunk('questions/loadQuestions', async step => {\n  try {\n    const response = await axios.get(\"http://localhost:1337/courses/\" + step + \"\");\n    return response;\n  } catch (error) {\n    return error;\n  }\n});\nexport const questionSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    status: 'idle',\n    error: null,\n    questions: [],\n    questionLength: 0,\n    initialQuestionQueue: []\n  },\n  reducers: {\n    makeInitial: (state, acttion) => {\n      let initial = [];\n\n      for (let i = 0; i < state.questionLength; i++) {\n        initial[i] = i;\n      }\n\n      state.initialQuestionQueue = initial;\n      console.log('^^^^^^^^: ' + JSON.stringify(state.initialQuestionQueue));\n    }\n  },\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadQuestions.pending]: state => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadQuestions.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.questions = action.payload.data.questions;\n      state.questionLength = action.payload.data.questions.length;\n    },\n    // Display error state\n    [loadQuestions.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadQuestions.rejected]: (state, action) => {\n      state.status = 'error';\n      state.questions = [];\n      state.error = action.payload.message;\n    }\n  }\n});\nexport const makeInitial = questionSlice.actions;\nexport const selectQuestions = state => state.question.questions;\nexport const selectQuestionsLength = state => state.question.questions.length;\nexport const selectInitialQuestionQueue = state => state.question.initialQuestionQueue;\nexport default questionSlice.reducer;","map":{"version":3,"sources":["/home/fateme/Documents/projects/yadet211/src/features/questions/questions.slice.js"],"names":["axios","createAsyncThunk","createSlice","useSelector","loadQuestions","step","response","get","error","questionSlice","name","initialState","status","questions","questionLength","initialQuestionQueue","reducers","makeInitial","state","acttion","initial","i","console","log","JSON","stringify","extraReducers","pending","fulfilled","action","payload","data","length","rejected","message","actions","selectQuestions","question","selectQuestionsLength","selectInitialQuestionQueue","reducer"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\n\nexport const loadQuestions = createAsyncThunk('questions/loadQuestions', async (step) => {\n  try {\n    const response = await axios.get(\"http://localhost:1337/courses/\" + step + \"\");\n    return response;\n\n  } catch (error) {\n    return error;\n  }\n\n});\n\n\nexport const questionSlice = createSlice({\n  name: 'questions',\n  initialState: {\n    status: 'idle',\n    error: null,\n    questions: [],\n    questionLength: 0,\n    initialQuestionQueue: [],\n  },\n  reducers: {\n    makeInitial: (state, acttion) => {\n      let initial = [];\n      for (let i = 0; i < state.questionLength; i++) {\n        initial[i] = i\n      }\n      state.initialQuestionQueue = initial;\n      console.log('^^^^^^^^: '+JSON.stringify(state.initialQuestionQueue))\n    }\n  },\n\n  extraReducers: {\n    // You can show loading state in the UI\n    [loadQuestions.pending]: (state) => {\n      state.status = 'loading';\n      state.error = null;\n    },\n    // Render the API response\n    [loadQuestions.fulfilled]: (state, action) => {\n      state.status = 'fulfilled';\n      state.error = null;\n      state.questions = action.payload.data.questions;\n      state.questionLength = action.payload.data.questions.length;\n    },\n    // Display error state\n    [loadQuestions.error]: (state, action) => {\n      state.status = 'error';\n      state.error = action.payload.error;\n    },\n    [loadQuestions.rejected]: (state, action) => {\n      state.status = 'error';\n      state.questions = [];\n      state.error = action.payload.message;\n    },\n\n  },\n});\nexport const makeInitial = questionSlice.actions;\nexport const selectQuestions = (state) => state.question.questions;\nexport const selectQuestionsLength = (state) => state.question.questions.length;\nexport const selectInitialQuestionQueue = (state) => state.question.initialQuestionQueue;\n\nexport default questionSlice.reducer;"]},"metadata":{},"sourceType":"module"}